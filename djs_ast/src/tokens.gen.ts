// This file is generated automatically
// Do not edit this file directly
//
// node gen_ts_tokens.js | pnpm prettier > src/TokenKind.ts

const TokenKinds = Object.freeze({
  Ident: "Ident",
  True: "True",
  False: "False",
  Null: "Null",
  Undefined: "Undefined",
  Let: "Let",
  Var: "Var",
  Const: "Const",
  If: "If",
  While: "While",
  Do: "Do",
  Else: "Else",
  Function: "Function",
  Try: "Try",
  Catch: "Catch",
  Finally: "Finally",
  Throw: "Throw",
  Return: "Return",
  For: "For",
  New: "New",
  In: "In",
  Of: "Of",
  Instanceof: "Instanceof",
  Yield: "Yield",
  Async: "Async",
  Await: "Await",
  Break: "Break",
  Continue: "Continue",
  Debugger: "Debugger",
  With: "With",
  Delete: "Delete",
  Typeof: "Typeof",
  Void: "Void",
  Class: "Class",
  Extends: "Extends",
  Static: "Static",
  Super: "Super",
  Switch: "Switch",
  Case: "Case",
  Default: "Default",
  String: "String",
  Number: "Number",
  Regex: "Regex",
  TemplateLiteralFragment: "TemplateLiteralFragment",
  LBrace: "LBrace",
  RBrace: "RBrace",
  LParen: "LParen",
  RParen: "RParen",
  LSquare: "LSquare",
  RSquare: "RSquare",
  Comma: "Comma",
  Colon: "Colon",
  Dot: "Dot",
  DotDotDot: "DotDotDot",
  Semi: "Semi",
  Question: "Question",
  Bang: "Bang",
  Tilde: "Tilde",
  Percent: "Percent",
  FatArrow: "FatArrow",
  Eq: "Eq",
  EqEq: "EqEq",
  EqEqEq: "EqEqEq",
  BangEq: "BangEq",
  BangEqEq: "BangEqEq",
  LessThan: "LessThan",
  LessThanEq: "LessThanEq",
  GreaterThan: "GreaterThan",
  GreaterThanEq: "GreaterThanEq",
  Plus: "Plus",
  Minus: "Minus",
  MinusMinus: "MinusMinus",
  PlusPlus: "PlusPlus",
  Star: "Star",
  Slash: "Slash",
  LessThanLessThan: "LessThanLessThan",
  GreaterThanGreaterThan: "GreaterThanGreaterThan",
  GreaterThanGreaterThanGreaterThan: "GreaterThanGreaterThanGreaterThan",
  AmpAmpEq: "AmpAmpEq",
  BarBarEq: "BarBarEq",
  QuestionQuestionEq: "QuestionQuestionEq",
  StarEq: "StarEq",
  SlashEq: "SlashEq",
  PercentEq: "PercentEq",
  PlusEq: "PlusEq",
  MinusEq: "MinusEq",
  LessThanLessThanEq: "LessThanLessThanEq",
  GreaterThanGreaterThanEq: "GreaterThanGreaterThanEq",
  GreaterThanGreaterThanGreaterThanEq: "GreaterThanGreaterThanGreaterThanEq",
  AmpEq: "AmpEq",
  VBarEq: "VBarEq",
  CaretEq: "CaretEq",
  BarEq: "BarEq",
  StarStarEq: "StarStarEq",
  VBar: "VBar",
  VBarVBar: "VBarVBar",
  Amp: "Amp",
  AmpAmp: "AmpAmp",
  Caret: "Caret",
  EndOfFile: "EndOfFile",
  Error: "Error",
})
const keywords: Record<string, TokenKind> = Object.freeze({
  true: "True",
  false: "False",
  null: "Null",
  undefined: "Undefined",
  let: "Let",
  var: "Var",
  const: "Const",
  if: "If",
  while: "While",
  do: "Do",
  else: "Else",
  function: "Function",
  try: "Try",
  catch: "Catch",
  finally: "Finally",
  throw: "Throw",
  return: "Return",
  for: "For",
  new: "New",
  in: "In",
  of: "Of",
  instanceof: "Instanceof",
  yield: "Yield",
  async: "Async",
  await: "Await",
  break: "Break",
  continue: "Continue",
  debugger: "Debugger",
  with: "With",
  delete: "Delete",
  typeof: "Typeof",
  void: "Void",
  class: "Class",
  extends: "Extends",
  static: "Static",
  super: "Super",
  switch: "Switch",
  case: "Case",
  default: "Default",
})

export type TokenKind = (typeof TokenKinds)[keyof typeof TokenKinds]
export const TokenKind = Object.freeze({
  ...TokenKinds,
  from_str(s: string): TokenKind | null {
    return keywords[s] ?? null
  },

  is_keyword(self: TokenKind): boolean {
    return keywords[self] !== undefined
  },
})
