import { tokens } from "./src/tokens.js";

let output = `
// This file is generated automatically
// Do not edit this file directly
// 
// node gen_ts_tokens.js | pnpm prettier > src/TokenKind.ts
`;

const symbols = tokens.map((token) => {
  if (typeof token === "string") {
    return `  ${token}: ${JSON.stringify(token)},`;
  } else {
    return `  ${token[0]}: ${JSON.stringify(token[0])},`;
  }
});

const keywords = tokens
  .filter((token) => typeof token === "object")
  .map(([variant, text]) => ({ variant, text }));
output += `
  const TokenKinds = Object.freeze({
    ${symbols.join("\n")}
  })
  const keywords: Record<string, TokenKind> = Object.freeze({
    ${keywords
      .map(({ text, variant }) => `\"${text}\": ${JSON.stringify(variant)},`)
      .join("\n    ")}
  })

  export type TokenKind = typeof TokenKinds[keyof typeof TokenKinds];
  export const TokenKind = Object.freeze({
    ...TokenKinds,
    from_str(s: string): TokenKind | null {
      return keywords[s] ?? null
    },

    is_keyword(self: TokenKind): boolean {
      return keywords[self] !== undefined
    }
  })
`;

console.log(output);
