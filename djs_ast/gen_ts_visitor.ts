import { type_registry } from "./ast.def.ts"
import type { EnumItem, Item, StructItem, Type } from "./astgen_items.ts"

console.log(`
// This file is generated by gen_ts_visitor.ts, do not edit it manually
import * as ast from "./ast.gen.ts"

export interface ASTVisitor {
  visit_source_file(ast: ast.SourceFile): void;
  visit_expr(expr: ast.Expr): void;
  visit_stmt(stmt: ast.Stmt): void;
  visit_pattern(pattern: ast.Pattern): void;
  visit_block(block: ast.Block): void;
}

export class ASTVisitorBase implements ASTVisitor {
  ${visitor_methods("SourceFile")}
}
`)

function visitor_methods(item_name: string): string {
  let result = ""
  const visited_set = new Set<Item>()
  visit_item(type_registry[item_name])
  return result

  function visit_item(item: Item) {
    if (visited_set.has(item)) {
      return
    }
    visited_set.add(item)
    if (item.kind === "enum") {
      visit_enum(item)
    } else if (item.kind === "struct") {
      visit_struct(item)
    } else {
      assert_never(item, `Unknown item kind: ${JSON.stringify(item)}`)
    }
  }
  function visit_enum(item: EnumItem) {
    if (item.variants.every((v) => Object.entries(v.args).length === 0)) {
      return
    }
    const item_var = item_var_name(item)
    const variant_walkers = item.variants
      .map((variant) => {
        const field_walkers = Object.entries(variant.args)
          .map(([name, type]) => field_walker(`${item_var}.${name}`, type))
          .join(";")
        return `case ${JSON.stringify(variant.name)}: {${field_walkers}; break; }`
      })
      .join("\n")
    result += `visit_${to_snake_case(item.name)}(${item_var}: ast.${item.name}): void {
        switch (${item_var}.kind) {
          ${variant_walkers}
        }
      }\n`

    for (const variant of item.variants) {
      for (const ty of Object.values(variant.args)) {
        visit_ty(ty)
      }
    }
  }

  function visit_struct(item: StructItem) {
    const field_walkers = Object.entries(item.fields)
      .map(([name, type]) => field_walker(`node.${name}`, type))
      .join("\n")
    result += `visit_${to_snake_case(item.name)}(node: ast.${item.name}): void {
        ${field_walkers}
      }\n`
    for (const field_ty of Object.values(item.fields)) {
      visit_ty(field_ty)
    }
  }

  function visit_ty(type: Type) {
    if (typeof type === "string") {
      const item = type_registry[type]
      if (!item) {
        return
      }
      visit_item(item)
    } else {
      const [container, inner] = type
      switch (container) {
        case "Vec":
          visit_ty(inner)
          break
        case "Option":
          visit_ty(inner)
          break
        default:
          assert_never(container, `Unknown container type: ${container}`)
      }
    }
  }
}
function field_walker(field: string, type: Type): string {
  if (typeof type === "string") {
    const item = type_registry[type]
    if (!item) {
      return ""
    }
    if (
      item.kind === "enum" &&
      item.variants.every((v) => Object.entries(v.args).length === 0)
    ) {
      return ""
    }
    return item_walker(item, field)
  } else {
    const [container, inner] = type
    switch (container) {
      case "Vec": {
        const item_name = list_item_name(field)
        return `for (const ${item_name} of ${field}) { ${field_walker(item_name, inner)} }`
      }
      case "Option":
        return `if (${field} !== null) { ${field_walker(field, inner)} }`
      default:
        assert_never(container, `Unknown container type: ${container}`)
    }
  }
}
function list_item_name(field: string): string {
  const name = field.replace(/^[a-z_]+\./, "")
  switch (name) {
    case "cases":
      return "c"
    default:
      return name.replace(/s$/, "")
  }
}
function item_var_name(item: Item): string {
  switch (item.name) {
    default:
      return to_snake_case(item.name)
  }
}

function item_walker(item: Item, field: string): string {
  return `this.visit_${to_snake_case(item.name)}(${field})`
}

function assert_never(value: never, message: string): never {
  throw new Error(`${message}: ${JSON.stringify(value)}`)
}

function to_snake_case(name: string): string {
  return name.replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase()
}
