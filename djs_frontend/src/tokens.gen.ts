// This file is generated automatically
// Do not edit this file directly
//
// node gen_ts_tokens.js | pnpm prettier > src/TokenKind.ts

const TokenKinds = Object.freeze({
  Ident: "Ident",
  True: "True",
  False: "False",
  Null: "Null",
  Undefined: "Undefined",
  Let: "Let",
  Var: "Var",
  Const: "Const",
  If: "If",
  While: "While",
  Do: "Do",
  Else: "Else",
  Function: "Function",
  Try: "Try",
  Catch: "Catch",
  Finally: "Finally",
  Throw: "Throw",
  Return: "Return",
  For: "For",
  New: "New",
  In: "In",
  Of: "Of",
  Instanceof: "Instanceof",
  Yield: "Yield",
  Async: "Async",
  Await: "Await",
  Break: "Break",
  Continue: "Continue",
  Debugger: "Debugger",
  With: "With",
  Delete: "Delete",
  Typeof: "Typeof",
  Void: "Void",
  Class: "Class",
  Extends: "Extends",
  Static: "Static",
  Super: "Super",
  Switch: "Switch",
  Case: "Case",
  Default: "Default",
  Export: "Export",
  Import: "Import",
  From: "From",
  As: "As",
  String: "String",
  Number: "Number",
  Regex: "Regex",
  TemplateLiteralFragment: "TemplateLiteralFragment",
  LBrace: "LBrace",
  RBrace: "RBrace",
  LParen: "LParen",
  RParen: "RParen",
  LSquare: "LSquare",
  RSquare: "RSquare",
  Comma: "Comma",
  Colon: "Colon",
  Dot: "Dot",
  DotDotDot: "DotDotDot",
  Semi: "Semi",
  Question: "Question",
  Bang: "Bang",
  Tilde: "Tilde",
  Percent: "Percent",
  FatArrow: "FatArrow",
  Eq: "Eq",
  EqEq: "EqEq",
  EqEqEq: "EqEqEq",
  BangEq: "BangEq",
  BangEqEq: "BangEqEq",
  LessThan: "LessThan",
  LessThanEq: "LessThanEq",
  GreaterThan: "GreaterThan",
  GreaterThanEq: "GreaterThanEq",
  Plus: "Plus",
  Minus: "Minus",
  MinusMinus: "MinusMinus",
  PlusPlus: "PlusPlus",
  Star: "Star",
  Slash: "Slash",
  LessThanLessThan: "LessThanLessThan",
  GreaterThanGreaterThan: "GreaterThanGreaterThan",
  GreaterThanGreaterThanGreaterThan: "GreaterThanGreaterThanGreaterThan",
  AmpAmpEq: "AmpAmpEq",
  BarBarEq: "BarBarEq",
  QuestionQuestionEq: "QuestionQuestionEq",
  StarEq: "StarEq",
  SlashEq: "SlashEq",
  PercentEq: "PercentEq",
  PlusEq: "PlusEq",
  MinusEq: "MinusEq",
  LessThanLessThanEq: "LessThanLessThanEq",
  GreaterThanGreaterThanEq: "GreaterThanGreaterThanEq",
  GreaterThanGreaterThanGreaterThanEq: "GreaterThanGreaterThanGreaterThanEq",
  AmpEq: "AmpEq",
  VBarEq: "VBarEq",
  CaretEq: "CaretEq",
  BarEq: "BarEq",
  StarStarEq: "StarStarEq",
  VBar: "VBar",
  VBarVBar: "VBarVBar",
  Amp: "Amp",
  AmpAmp: "AmpAmp",
  Caret: "Caret",
  EndOfFile: "EndOfFile",
  Error: "Error",
})
const text_to_keyword_kind: Map<string, TokenKind> = new Map([
  ["true", TokenKinds.True],
  ["false", TokenKinds.False],
  ["null", TokenKinds.Null],
  ["undefined", TokenKinds.Undefined],
  ["let", TokenKinds.Let],
  ["var", TokenKinds.Var],
  ["const", TokenKinds.Const],
  ["if", TokenKinds.If],
  ["while", TokenKinds.While],
  ["do", TokenKinds.Do],
  ["else", TokenKinds.Else],
  ["function", TokenKinds.Function],
  ["try", TokenKinds.Try],
  ["catch", TokenKinds.Catch],
  ["finally", TokenKinds.Finally],
  ["throw", TokenKinds.Throw],
  ["return", TokenKinds.Return],
  ["for", TokenKinds.For],
  ["new", TokenKinds.New],
  ["in", TokenKinds.In],
  ["of", TokenKinds.Of],
  ["instanceof", TokenKinds.Instanceof],
  ["yield", TokenKinds.Yield],
  ["async", TokenKinds.Async],
  ["await", TokenKinds.Await],
  ["break", TokenKinds.Break],
  ["continue", TokenKinds.Continue],
  ["debugger", TokenKinds.Debugger],
  ["with", TokenKinds.With],
  ["delete", TokenKinds.Delete],
  ["typeof", TokenKinds.Typeof],
  ["void", TokenKinds.Void],
  ["class", TokenKinds.Class],
  ["extends", TokenKinds.Extends],
  ["static", TokenKinds.Static],
  ["super", TokenKinds.Super],
  ["switch", TokenKinds.Switch],
  ["case", TokenKinds.Case],
  ["default", TokenKinds.Default],
  ["export", TokenKinds.Export],
  ["import", TokenKinds.Import],
  ["from", TokenKinds.From],
  ["as", TokenKinds.As],
])

export type TokenKind = (typeof TokenKinds)[keyof typeof TokenKinds]
const keyword_token_kinds = new Set<TokenKind>(text_to_keyword_kind.values())

export const TokenKind = Object.freeze({
  ...TokenKinds,
  keyword_kind(s: string): TokenKind | null {
    return text_to_keyword_kind.get(s) ?? null
  },

  is_keyword(self: TokenKind): boolean {
    return keyword_token_kinds.has(self)
  },
})
