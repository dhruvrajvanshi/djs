import { tokens } from "./src/tokens.def.js"

let output = `
// This file is generated automatically
// Do not edit this file directly
// 
// node gen_ts_tokens.js | pnpm prettier > src/TokenKind.ts
`

const symbols = tokens.map((token) => {
  if (typeof token === "string") {
    return `  ${token}: ${JSON.stringify(token)},`
  } else {
    return `  ${token[0]}: ${JSON.stringify(token[0])},`
  }
})

const keywords = tokens
  .filter((token) => typeof token === "object")
  .map(([variant, text]) => ({ variant, text }))
output += `
  const TokenKinds = Object.freeze({
    ${symbols.join("\n")}
  })
  const text_to_keyword_kind: Map<string, TokenKind> = new Map([
    ${keywords
      .map(
        ({ text, variant }) =>
          `[${JSON.stringify(text)}, TokenKinds.${variant}],`,
      )
      .join("\n    ")}
  ])

  export type TokenKind = typeof TokenKinds[keyof typeof TokenKinds];
  const keyword_token_kinds = new Set<TokenKind>(text_to_keyword_kind.values());

  export const TokenKind = Object.freeze({
    ...TokenKinds,
    keyword_kind(s: string): TokenKind | null {
      return text_to_keyword_kind.get(s) ?? null;
    },

    is_keyword(self: TokenKind): boolean {
      return keyword_token_kinds.has(self);
    }
  })
`

console.log(output)
